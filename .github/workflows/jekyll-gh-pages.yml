# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Install ngrok and jq
        run: |
          npm install -g ngrok
          sudo apt-get update && sudo apt-get install -y jq

      - name: Configure ngrok authtoken
        run: |
          ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Start Koa server
        run: |
          nohup node src/main.js &
          sleep 5
          curl -f http://localhost:3000 || { echo 'Koa server failed to start'; exit 1; }

      - name: Start ngrok
        run: |
          nohup ngrok http 3000 > ngrok.log &
          sleep 10
          cat ngrok.log

      - name: Get ngrok URL
        run: |
          echo "Fetching ngrok URL..."
          curl -s http://localhost:4040/api/tunnels
          NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r .tunnels[0].public_url)
          echo "ngrok URL: $NGROK_URL"
          echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV

      - name: Validate ngrok URL
        run: |
          if [ -z "${{ env.NGROK_URL }}" ]; then
            echo "ngrok URL is empty"
            exit 1
          fi
          echo "ngrok URL: ${{ env.NGROK_URL }}"

      - name: Test Koa server via ngrok
        run: |
          curl -f ${{ env.NGROK_URL }} || { echo 'Failed to access Koa server via ngrok'; exit 1; }

      # - name: Stop Koa server
      #   if: success()
      #   run: |
      #     pkill -f "node src/main.js"
